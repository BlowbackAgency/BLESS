/*! BLESS.less | Version 1.1.0 | MIT Licence | https://github.com/BlowbackDesign/BLESS */

@bless-ie: true;


// ===================================================
// CSS3 Properties
// ===================================================

// background-clip
.background-clip(@clip) {
  -webkit-background-clip: @clip;
     -moz-background-clip: @clip;
          background-clip: @clip;
}

// background-size
.background-size(@size) {
  -webkit-background-size: @size;
     -moz-background-size: @size;
       -o-background-size: @size;
          background-size: @size;
}

// border-radius
.border-radius(@radius) {
  -webkit-border-radius: @radius;
     -moz-border-radius: @radius;
          border-radius: @radius;
}

// border-top-left-radius
.border-top-left-radius(@radius) {
  -webkit-border-top-left-radius: @radius;
      -moz-border-radius-topleft: @radius;
          border-top-left-radius: @radius;
}

// border-top-right-radius
.border-top-right-radius(@radius) {
  -webkit-border-top-right-radius: @radius;
      -moz-border-radius-topright: @radius;
          border-top-right-radius: @radius;
}

// border-bottom-right-radius
.border-bottom-right-radius(@radius) {
  -webkit-border-bottom-right-radius: @radius;
      -moz-border-radius-bottomright: @radius;
          border-bottom-right-radius: @radius;
}

// border-bottom-left-radius
.border-bottom-left-radius(@radius) {
  -webkit-border-bottom-left-radius: @radius;
      -moz-border-radius-bottomleft: @radius;
          border-bottom-left-radius: @radius;
}

// box-shadow
.box-shadow(@shadow) when not (isstring(@shadow)) {
  -webkit-box-shadow: @shadow;
     -moz-box-shadow: @shadow;
          box-shadow: @shadow;
}

// box-shadow (string)
.box-shadow(@shadow) when (isstring(@shadow)) {
  -webkit-box-shadow: e(@shadow);
     -moz-box-shadow: e(@shadow);
          box-shadow: e(@shadow);
}

// box-sizing
.box-sizing(@size) {
  -webkit-box-sizing: @size;
     -moz-box-sizing: @size;
      -ms-box-sizing: @size;
          box-sizing: @size;
}

// column-count
.column-count(@count) {
  -webkit-column-count: @count;
     -moz-column-count: @count;
          column-count: @count;
}

// column-gap
.column-gap(@gap) {
  -webkit-column-gap: @gap;
     -moz-column-gap: @gap;
          column-gap: @gap;
}

// opacity
.opacity(@opacity; @ie:@bless-ie) {
  -webkit-opacity: @opacity;
   -khtml-opacity: @opacity;
     -moz-opacity: @opacity;
          opacity: @opacity;
}

// opacity (IE filter enabled)
.opacity(@opacity; @ie:@bless-ie) when (@ie=true) {
  .ie-opacity(@opacity);
}

// opacity (IE filter)
.ie-opacity(@opacity; ...) {
  @_opacity: @opacity * 100;
  -ms-filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{_opacity})";
      filter: ~"alpha(opacity=@{_opacity})";
}

// text-size-adjust
.text-size-adjust(@size) {
  -webkit-text-size-adjust: @size;
      -ms-text-size-adjust: @size;
          text-size-adjust: @size;	
}

// transform
.transform(@function) {
  -webkit-transform: @function;
     -moz-transform: @function;
      -ms-transform: @function;
       -o-transform: @function;
          transform: @function;
}

// transform-origin
.transform-origin(@origin) {
  -webkit-transform-origin: @origin;
     -moz-transform-origin: @origin;
       -o-transform-origin: @origin;
          transform-origin: @origin;
}

// transform-style 
.transform-style(@style) {
  -webkit-transform-style: @style;
     -moz-transform-style: @style;
          transform-style: @style;
}

// transition
.transition(@transition) when not (isstring(@transition)) {
  -webkit-transition: @transition;
     -moz-transition: @transition;
       -o-transition: @transition;
          transition: @transition;
}

// transition (string)
.transition(@transition) when (isstring(@transition)) {
  -webkit-transition: e(@transition);
     -moz-transition: e(@transition);
       -o-transition: e(@transition);
          transition: e(@transition);
}

// transition-property
.transition-property(@transition-property) {
  -webkit-transition-property: @transition-property;
     -moz-transition-property: @transition-property;
       -o-transition-property: @transition-property;
          transition-property: @transition-property;
}

// transition-duration
.transition-duration(@transition-duration) {
  -webkit-transition-duration: @transition-duration;
     -moz-transition-duration: @transition-duration;
       -o-transition-duration: @transition-duration;
          transition-duration: @transition-duration;
}

// transition-timing-function
.transition-timing-function(@transition-timing-function) {
  -webkit-transition-timing-function: @transition-timing-function;
     -moz-transition-timing-function: @transition-timing-function;
       -o-transition-timing-function: @transition-timing-function;
          transition-timing-function: @transition-timing-function;
}

// transition-delay
.transition-delay(@transition-delay) {
  -webkit-transition-delay: @transition-delay;
     -moz-transition-delay: @transition-delay;
       -o-transition-delay: @transition-delay;
          transition-delay: @transition-delay;
}

// user-select
.user-select(@select) {
  -webkit-user-select: @select;
     -moz-user-select: @select;
      -ms-user-select: @select;
       -o-user-select: @select;
          user-select: @select;
}


// ===================================================
// Transform Functions
// ===================================================

// rotate
.rotate(@degrees) {
  @_degrees: unit(@degrees);
  .transform(rotate(~"@{_degrees}deg"));
}

// scale
.scale(@x; @y:null) when not (isnumber(@y)) {
  .transform(scale(@x));
}

// scale (x, y)
.scale(@x; @y:null) when (isnumber(@y)) {
  .transform(scale(@x, @y));
}

// skew
.skew(@x; @y:0) {
  @_x: unit(@x);
  @_y: unit(@y);
  -webkit-backface-visibility: hidden;
  .transform(skew(~"@{_x}deg", ~"@{_y}deg"));
}

// translate
.translate(@x; @y:0) {
  .transform(translate(@x, @y));
}

// translate3d
.translate3d(@x; @y; @z) {
  .transform(translate3d(@x, @y, @z));
}


// ===================================================
// CSS Helpers
// ===================================================

// columns
.columns(@count; @gap:1em) {
  .column-count(@count);
  .column-gap(@gap);
}

// font-size (px/rem)
.font-size(@font-size:16) {
  @_size: unit(@font-size);
	@_rem: (@_size / 10);
  font-size: @_size * 1px;
  font-size: ~"@{_rem}rem";
}

// border-radius shortcut
.rounded(@radius) { .border-radius(@radius); }
.rounded-top-left(@radius) { .border-top-left-radius(@radius); }
.rounded-top-right(@radius) { .border-top-right-radius(@radius); }
.rounded-bottom-right(@radius) { .border-bottom-right-radius(@radius); }
.rounded-bottom-left(@radius) { .border-bottom-left-radius(@radius); }

// size
.size(@width; @height:null) when (@height=null) {
  width: @width;
  height: @width;
}
.size(@width; @height:null) when not (@height=null) {
  width: @width;
  height: @height;
}

// min-size
.min-size(@width; @height:null) when (@height=null) {
  min-width: @width;
  min-height: @width;
}
.min-size(@width; @height:null) when not (@height=null) {
  min-width: @width;
  min-height: @height;
}

// max-size
.max-size(@width; @height:null) when (@height=null) {
  max-width: @width;
  max-height: @width;
}
.max-size(@width; @height:null) when not (@height=null) {
  max-width: @width;
  max-height: @height;
}

// spacing
.spacing(@margin; @padding:null) when (@padding=null) {
  margin: @margin;
  padding: @margin;
}
.spacing(@margin; @padding:null) when not (@padding=null) {
  margin: @margin;
  padding: @padding;
}


// ===================================================
// PSD Layer Style
// ===================================================

// drop-shadow
.drop-shadow(@x:2px; @y:3px; @blur:5px; @spread:0; @color:#000; @alpha:0.3) when (iscolor(@color)) {
	.box-shadow(@x @y @blur @spread hsla(hue(@color), saturation(@color), lightness(@color), @alpha));
}
// drop-shadow [@x @y @blur @spread @color @alpha]
.drop-shadow(@args) when (iscolor(extract(@args, 5))) and (isnumber(extract(@args, 6))) {
	.drop-shadow(extract(@args, 1); extract(@args, 2); extract(@args, 3); extract(@args, 4); extract(@args, 5); extract(@args, 6));
}
// drop-shadow [@x @y @blur @spread @color]
.drop-shadow(@args) when (iscolor(extract(@args, 5))) and not (isnumber(extract(@args, 6))) {
	.drop-shadow(extract(@args, 1); extract(@args, 2); extract(@args, 3); extract(@args, 4); extract(@args, 5));
}
// drop-shadow [@x @y @blur @color @alpha]
.drop-shadow(@args) when (iscolor(extract(@args, 4))) and (isnumber(extract(@args, 5))) {
	.drop-shadow(extract(@args, 1); extract(@args, 2); extract(@args, 3); 0; extract(@args, 4); extract(@args, 5));
}
// drop-shadow [@x @y @blur @color]
.drop-shadow(@args) when (iscolor(extract(@args, 4))) and not (isnumber(extract(@args, 5))) {
	.drop-shadow(extract(@args, 1); extract(@args, 2); extract(@args, 3); 0; extract(@args, 4));
}

// inner-shadow
.inner-shadow(@x:2px; @y:3px; @blur:5px; @spread:0; @color:#000; @alpha:0.2) {
	.box-shadow(inset @x @y @blur @spread hsla(hue(@color), saturation(@color), lightness(@color), @alpha));
}
// inner-shadow [@x @y @blur @spread @color @alpha]
.inner-shadow(@args) when (iscolor(extract(@args, 5))) and (isnumber(extract(@args, 6))) {
	.inner-shadow(extract(@args, 1); extract(@args, 2); extract(@args, 3); extract(@args, 4); extract(@args, 5); extract(@args, 6));
}
// inner-shadow [@x @y @blur @spread @color]
.inner-shadow(@args) when (iscolor(extract(@args, 5))) and not (isnumber(extract(@args, 6))) {
	.inner-shadow(extract(@args, 1); extract(@args, 2); extract(@args, 3); extract(@args, 4); extract(@args, 5));
}
// inner-shadow [@x @y @blur @color @alpha]
.inner-shadow(@args) when (iscolor(extract(@args, 4))) and (isnumber(extract(@args, 5))) {
	.inner-shadow(extract(@args, 1); extract(@args, 2); extract(@args, 3); 0; extract(@args, 4); extract(@args, 5));
}
// inner-shadow [@x @y @blur @color]
.inner-shadow(@args) when (iscolor(extract(@args, 4))) and not (isnumber(extract(@args, 5))) {
	.inner-shadow(extract(@args, 1); extract(@args, 2); extract(@args, 3); 0; extract(@args, 4));
}

// stroke
.stroke(@color:#f30; @alpha:1; @size:1px; @string:null) when (@string=null) {
  @_color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
  text-shadow:-@size -@size 0 @_color, @size -@size 0 @_color, -@size @size 0 @_color, @size @size 0 @_color;
}
// stroke (xtra text shadow @string enabled)
.stroke(@color:#f30; @alpha:1; @size:1px; @string:null) when (isstring(@string)) {
  @_color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
  text-shadow:@string, -@size -@size 0 @_color, @size -@size 0 @_color, -@size @size 0 @_color, @size @size 0 @_color;
}
// stroke [@color, @alpha, string]
.stroke(@color:#f30; @alpha:1; @size:1px; @string:null) when (isstring(@size)) {
	.stroke(@color; @alpha; 1px; @size);
}
// stroke [@color, string]
.stroke(@color:#f30; @alpha:1; @size:1px; @string:null) when (isstring(@alpha)) {
	.stroke(@color; 1; @size; @alpha);
}


// ===================================================
// PSD/CSS Alpha Opacity Colors
// ===================================================

// background-color
.background-color(@color; @alpha:0.7) {
  background-color: @color;
  background-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
}

// border-color (single color and alpha)
.border-color(@color; @alpha:0.7) when (iscolor(@color)) and (isnumber(@alpha)) {
  border-color: @color;
  border-color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
}

// border-color (two colors and single alpha)
.border-color(@color; @alpha:0.7) when (iscolor(extract(@color, 2))) and not (iscolor(extract(@color, 3))) and (isnumber(@alpha)) {
  @_top_bottom: extract(@color, 1);
	@_right_left: extract(@color, 2);
	@__top_bottom: hsla(hue(@_top_bottom), saturation(@_top_bottom), lightness(@_top_bottom), @alpha);
  @__right_left: hsla(hue(@_right_left), saturation(@_right_left), lightness(@_right_left), @alpha);
  border-color: @_top_bottom @_right_left;
  border-color: @__top_bottom @__right_left;
}

// border-color (three colors and single alpha)
.border-color(@color; @alpha:0.7) when (iscolor(extract(@color, 3))) and not (iscolor(extract(@color, 4))) and (isnumber(@alpha)) {
  @_top: extract(@color, 1);
	@_right_left: extract(@color, 2);
  @_bottom: extract(@color, 3);
	@__top: hsla(hue(@_top), saturation(@_top), lightness(@_top), @alpha);
  @__right_left: hsla(hue(@_right_left), saturation(@_right_left), lightness(@_right_left), @alpha);
  @__bottom: hsla(hue(@_bottom), saturation(@_bottom), lightness(@_bottom), @alpha);
  border-color: @_top @_right_left @_bottom;
  border-color: @__top @__right_left @__bottom;
}

// border-color (four colors and single alpha)
.border-color(@color; @alpha:0.7) when (iscolor(extract(@color, 4))) and (isnumber(@alpha)) {
  @_top: extract(@color, 1);
  @_right: extract(@color, 2);
  @_bottom: extract(@color, 3);
  @_left: extract(@color, 4);
	@__top: hsla(hue(@_top), saturation(@_top), lightness(@_top), @alpha);
  @__right: hsla(hue(@_right), saturation(@_right), lightness(@_right), @alpha);
  @__bottom: hsla(hue(@_bottom), saturation(@_bottom), lightness(@_bottom), @alpha);
  @__left: hsla(hue(@_left), saturation(@_left), lightness(@_left), @alpha);
  border-color: @_top @_right @_bottom @_left;
  border-color: @__top @__right @__bottom @__left;
}

// border-color (two colors and two alphas)
.border-color(@color; @alpha) when (iscolor(extract(@color, 2))) and not (iscolor(extract(@color, 3))) and (isnumber(extract(@alpha, 2))) and not (isnumber(extract(@alpha, 3))) {
  @_top_bottom: extract(@color, 1);
	@_right_left: extract(@color, 2);
	@__top_bottom: hsla(hue(@_top_bottom), saturation(@_top_bottom), lightness(@_top_bottom), extract(@alpha, 1));
  @__right_left: hsla(hue(@_right_left), saturation(@_right_left), lightness(@_right_left), extract(@alpha, 2));
  border-color: @_top_bottom @_right_left;
  border-color: @__top_bottom @__right_left;
}

// border-color (three colors and three alphas)
.border-color(@color; @alpha) when (iscolor(extract(@color, 3))) and not (iscolor(extract(@color, 4))) and (isnumber(extract(@alpha, 3))) and not (isnumber(extract(@alpha, 4))) {
  @_top: extract(@color, 1);
	@_right_left: extract(@color, 2);
  @_bottom: extract(@color, 3);
	@__top: hsla(hue(@_top), saturation(@_top), lightness(@_top), extract(@alpha, 1));
  @__right_left: hsla(hue(@_right_left), saturation(@_right_left), lightness(@_right_left), extract(@alpha, 2));
  @__bottom: hsla(hue(@_bottom), saturation(@_bottom), lightness(@_bottom), extract(@alpha, 3));
  border-color: @_top @_right_left @_bottom;
  border-color: @__top @__right_left @__bottom;
}

// border-color (four colors and four alphas)
.border-color(@color; @alpha) when (iscolor(extract(@color, 4))) and (isnumber(extract(@alpha, 4))) {
  @_top: extract(@color, 1);
  @_right: extract(@color, 2);
  @_bottom: extract(@color, 3);
  @_left: extract(@color, 4);
	@__top: hsla(hue(@_top), saturation(@_top), lightness(@_top), extract(@alpha, 1));
  @__right: hsla(hue(@_right), saturation(@_right), lightness(@_right), extract(@alpha, 2));
  @__bottom: hsla(hue(@_bottom), saturation(@_bottom), lightness(@_bottom), extract(@alpha, 3));
  @__left: hsla(hue(@_left), saturation(@_left), lightness(@_left), extract(@alpha, 4));
  border-color: @_top @_right @_bottom @_left;
  border-color: @__top @__right @__bottom @__left;
}

// color
.color(@color; @alpha:0.7) {
  color: @color;
  color: hsla(hue(@color), saturation(@color), lightness(@color), @alpha);
}

// ===================================================
// Gradients (with alpha opacity)
// ===================================================

// linear-gradient iterator (without alpha)
.linear-gradient(@angle; @color; @position:0% 100%; @alpha:null; @str:""; @webkit:""; @i:1) when (iscolor(extract(@color, @i))) and (@alpha=null) {
  @_color: extract(@color, @i);
  @_position: extract(@position, @i);
  @_str: ~"@{str}, @{_color} @{_position}";
  @_webkit: ~"@{webkit}, color-stop(@{_position}, @{_color})";
  .linear-gradient(@angle; @color; @position; @alpha; @_str; @_webkit; (@i + 1));
}

// linear-gradient iterator (with single alpha)
.linear-gradient(@angle; @color; @position:0% 100%; @alpha:null; @str:""; @webkit:""; @i:1) when (iscolor(extract(@color, @i))) and (isnumber(@alpha)) {
  @_c: extract(@color, @i);
  @_color: hsla(hue(@_c), saturation(@_c), lightness(@_c), @alpha);
  @_position: extract(@position, @i);
  @_str: ~"@{str}, @{_color} @{_position}";
  @_webkit: ~"@{webkit}, color-stop(@{_position}, @{_color})";
  .linear-gradient(@angle; @color; @position; @alpha; @_str; @_webkit; (@i + 1));
}

// linear-gradient iterator (with multi alphas)
.linear-gradient(@angle; @color; @position:0% 100%; @alpha:null; @str:""; @webkit:""; @i:1) when (iscolor(extract(@color, @i))) and (isnumber(extract(@alpha, @i))) {
  @_a: extract(@alpha, @i);
  @_c: extract(@color, @i);
  @_color: hsla(hue(@_c), saturation(@_c), lightness(@_c), @_a);
  @_position: extract(@position, @i);
  @_str: ~"@{str}, @{_color} @{_position}";
  @_webkit: ~"@{webkit}, color-stop(@{_position}, @{_color})";
  .linear-gradient(@angle; @color; @position; @alpha; @_str; @_webkit; (@i + 1));
}

// linear-gradient output
.linear-gradient(@angle; @color; @position:0% 100%; @alpha:null; @str:""; @webkit:""; @i:1) when not (iscolor(extract(@color, @i))) and (@i > 2) {
  @_angle: (unit(@angle) - floor((unit(@angle) + 179) / 360) * 360);
  @__angle: (@_angle + 90) - (@_angle * 2);
  @_str: ~"@{_angle}deg@{str}";
  @__str: ~"@{__angle}deg@{str}";
  .webkit-linear-gradient(@_angle; @webkit);
  background: -webkit-linear-gradient(@_str);
  background:    -moz-linear-gradient(@_str);
  background:     -ms-linear-gradient(@_str);
  background:      -o-linear-gradient(@_str);
  background:        linear-gradient(@__str);
}

// linear-gradient support for legacy webkit (Safari 4+, Chrome 2+)
.webkit-linear-gradient(@angle; @webkit) when (@angle = -90) {
  background: -webkit-gradient(~"linear, center top, center bottom@{webkit}");
}
.webkit-linear-gradient(@angle; @webkit) when (@angle = -135) {
  background: -webkit-gradient(~"linear, right top, left bottom@{webkit}");
}
.webkit-linear-gradient(@angle; @webkit) when (@angle = 180) {
  background: -webkit-gradient(~"linear, right center, left center@{webkit}");
}
.webkit-linear-gradient(@angle; @webkit) when (@angle = 135) {
  background: -webkit-gradient(~"linear, right bottom, left top@{webkit}");
}
.webkit-linear-gradient(@angle; @webkit) when (@angle = 90) {
  background: -webkit-gradient(~"linear, center bottom, center top@{webkit}");
}
.webkit-linear-gradient(@angle; @webkit) when (@angle = 45) {
  background: -webkit-gradient(~"linear, left bottom, right top@{webkit}");
}
.webkit-linear-gradient(@angle; @webkit) when (@angle = 0) {
  background: -webkit-gradient(~"linear, left center, right center@{webkit}");
}
.webkit-linear-gradient(@angle; @webkit) when (@angle = -45) {
  background: -webkit-gradient(~"linear, left top, right bottom@{webkit}");
}

// linear gradient shortcuts
.linear-gradient-top(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) {
  .linear-gradient(-90; @color; @position; @alpha);
}
.linear-gradient-top-right(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) {
  .linear-gradient(-135; @color; @position; @alpha);
}
.linear-gradient-right(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) {
  .linear-gradient(-180; @color; @position; @alpha);
}
.linear-gradient-bottom-right(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) {
  .linear-gradient(135; @color; @position; @alpha);
}
.linear-gradient-bottom(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) {
  .linear-gradient(90; @color; @position; @alpha);
}
.linear-gradient-bottom-left(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) {
  .linear-gradient(45; @color; @position; @alpha);
}
.linear-gradient-left(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) {
  .linear-gradient(0; @color; @position; @alpha);
}
.linear-gradient-top-left(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) {
  .linear-gradient(-45; @color; @position; @alpha);
}

// ie support for linear gradient shortcuts
.linear-gradient-top(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) when (@ie=true) {
  .ie-linear-gradient-top(@color; @alpha);
}
.linear-gradient-right(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) when (@ie=true) {
  .ie-linear-gradient-right(@color; @alpha);
}
.linear-gradient-bottom(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) when (@ie=true) {
  .ie-linear-gradient-bottom(@color; @alpha);
}
.linear-gradient-left(@color; @position:0% 100%; @alpha:null; @ie:@bless-ie) when (@ie=true) {
  .ie-linear-gradient-left(@color; @alpha);
}

// ie linear gradient filters
.ie-linear-gradient-vars(@color; @alpha) when (@alpha=null) {
	@_color_a: extract(@color, 1);
	@_color_b: extract(@color, 2);
	@_start: argb(@_color_a);
	@_stop: argb(@_color_b);
}
.ie-linear-gradient-vars(@color; @alpha) when (isnumber(@alpha)) {
	@_color_a: extract(@color, 1);
	@_color_b: extract(@color, 2);
	@_start: argb(hsla(hue(@_color_a), saturation(@_color_a), lightness(@_color_a), @alpha));
	@_stop: argb(hsla(hue(@_color_b), saturation(@_color_b), lightness(@_color_b), @alpha));
}
.ie-linear-gradient-vars(@color; @alpha) when (isnumber(extract(@alpha, 2))) {
	@_color_a: extract(@color, 1);
	@_color_b: extract(@color, 2);
	@_alpha_a: extract(@alpha, 1);
	@_alpha_b: extract(@alpha, 2);
	@_start: argb(hsla(hue(@_color_a), saturation(@_color_a), lightness(@_color_a), @_alpha_a));
	@_stop: argb(hsla(hue(@_color_b), saturation(@_color_b), lightness(@_color_b), @_alpha_b));
}
.ie-linear-gradient-top(@color; @alpha:null) {
	.ie-linear-gradient-vars(@color; @alpha);
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", @_start, @_stop));
}
.ie-linear-gradient-right(@color; @alpha:null) {
	.ie-linear-gradient-vars(@color; @alpha);
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)", @_stop, @_start));
}
.ie-linear-gradient-bottom(@color; @alpha:null) {
	.ie-linear-gradient-vars(@color; @alpha);
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)", @_stop, @_start));
}
.ie-linear-gradient-left(@color; @alpha:null) {
	.ie-linear-gradient-vars(@color; @alpha);
	filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)", @_start, @_stop));
}
